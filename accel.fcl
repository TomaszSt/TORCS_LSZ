FUNCTION_BLOCK accel

VAR_INPUT
	speed			: REAL;
	toMiddle		: REAL;
	carAngle		: REAL;
	currSegment 	: REAL;
	nextSegment 	: REAL;
	nextAngle		: REAL;
	nextArc			: REAL;
	nextLength		: REAL;
	distance		: REAL;
END_VAR

VAR_OUTPUT
	accel			: REAL;
END_VAR

FUZZIFY speed
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY toMiddle
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY carAngle
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY currSegment
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY nextSegment
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY nextAngle
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY nextArc
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY nextLength
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

FUZZIFY distance
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
END_FUZZIFY

DEFUZZIFY accel
	TERM initial := (0, 0) (10, 0) (30, 1) (60, 1) (90, 0) (100, 0);
	METHOD: COG;
	DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK first
	AND : MIN;    // [MIN|BDIF|PROD]
    OR : MAX;     // [MAX|ASUM|BSUM]
    ACT : MIN;    // [MIN|PROD]
    ACCU : MAX;   // [MAX|BSUM|NSUM|PROBOR|SUM]
	RULE 1: IF Speed IS initial THEN accel IS initial;
END_RULEBLOCK

END_FUNCTION_BLOCK